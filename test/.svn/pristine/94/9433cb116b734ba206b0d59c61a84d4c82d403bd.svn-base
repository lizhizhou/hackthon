#!/user/bin/env python

import threading
import subprocess        

class Command(object):
    TIMEOUT = -2
    SUCCESS = 0
    ERROR = -1    
    
    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None
        self.out = ''
        self.err = 0
        
    def run(self, timeout):
        def target():
            print "subprocess started"
            self.process = subprocess.Popen(self.cmd, shell=True, stdout=subprocess.PIPE)
            self.out, self.err = self.process.communicate()
            print "subprocess finished"
            
        thread = threading.Thread(target=target)
        thread.start()
        
        thread.join(timeout)
        if thread.is_alive():
            print "Running Timeout, terminating process"
            self.process.terminate()
            thread.join()
            return self.TIMEOUT
        else:
            #print self.process.returncode
            if self.process.returncode:
                return self.ERROR
            else:
                return self.SUCCESS
            
    def output(self):
        return self.out
    
    def error(self):
        return self.err


def compile(src):
    pre,ext = src.split('.')
        

import unittest
import os

class HackTest(unittest.TestCase):
    
    def setUp(self):        
        self.source = [f for f in os.listdir('source') ]
        self.testcase = [f for f in os.listdir('testcase')]
        self.fail_compile = []
        print 'source:',self.source
        print 'testcase:',self.testcase
        
    def test_compile(self):
        for src in self.source:
            
        
    def test_ascii(self):
        
        
        
        

            
if __name__ == '__main__':
    unittest.main(exit=False)
    
    

