#!/user/bin/env python

class MaxPriorityQueue:
    
    def __init__(self):
        self.__pq = [-1] #the first element is unused
    
    def isEmpty(self):
        return len(self.__pq) == 1
    
    def size(self):
        return len(self.__pq) - 1
    
    def insert(self, v):
        self.__pq.append(v)
        self.__swim(self.size())
        
    def __swim(self, n):
        while n > 1 and self.__pq[n/2] < self.__pq[n]:
            self.__pq[n/2],self.__pq[n] = self.__pq[n],self.__pq[n/2]
            n = n/2
    
    def __sink(self, n):
        N = self.size()
        while n*2 <= N:
            j = n*2
            if j < N and self.__pq[j] < self.__pq[j+1]:
                j += 1
            if self.__pq[n] >= self.__pq[j]:
                break
            self.__pq[n],self.__pq[j] = self.__pq[j],self.__pq[n]
            n = j
    
    def deleteMax(self):
        max = self.__pq[1]        
        self.__pq[1],self.__pq[-1] = self.__pq[-1],self.__pq[1]
        self.__pq.pop()
        self.__sink(1)       
        return max
    
class MinPriorityQueue:
    
    def __init__(self):
        self.__pq = [-1] #the first element is unused
    
    def isEmpty(self):
        return len(self.__pq) == 1
    
    def size(self):
        return len(self.__pq) - 1
    
    def insert(self, v):
        self.__pq.append(v)
        self.__swim(self.size())
        
    def __swim(self, n):
        while n > 1 and self.__pq[n/2] > self.__pq[n]:
            self.__pq[n/2],self.__pq[n] = self.__pq[n],self.__pq[n/2]
            n = n/2
    
    def __sink(self, n):
        N = self.size()
        while n*2 <= N:
            j = n*2
            if j < N and self.__pq[j] > self.__pq[j+1]:
                j += 1
            if self.__pq[n] <= self.__pq[j]:
                break
            self.__pq[n],self.__pq[j] = self.__pq[j],self.__pq[n]
            n = j
    
    def deleteMin(self):
        min = self.__pq[1]        
        self.__pq[1],self.__pq[-1] = self.__pq[-1],self.__pq[1]
        self.__pq.pop()
        self.__sink(1)       
        return min
      

"""
remember this heapsort don't use the a[0]
"""
def heapSort(a):
    
    def sink(a, k, N):
        while k*2 <= N:
            j = k*2
            if j < N and a[j] < a[j+1]:
                j += 1
            if a[k] >= a[j]:
                break
            a[k],a[j] = a[j],a[k]
            k = j
    
    N = len(a)-1       
    for i in range(N/2, 0, -1):
        sink(a, i, N)
        
    while N > 1:
        a[1],a[N] = a[N],a[1]
        N -= 1
        sink(a,1,N)
    
    
import unittest

class TestHeapSort(unittest.TestCase):
    
    def test_minPQ(self):
        mpq = MinPriorityQueue()
        for i in 'MINPRIORITYQUEUE':
            mpq.insert(i)
        b = ''.join([mpq.deleteMin() for i in range(mpq.size())])
        self.assertEqual(b, 'EEIIIMNOPQRRTUUY')
    
    def test_maxPQ(self):
        mpq = MaxPriorityQueue()
        for i in 'MAXPRIORITYQUEUE':
            mpq.insert(i)            
        b = ''.join([mpq.deleteMax() for i in range(mpq.size())])
        self.assertEqual(b, 'YXUUTRRQPOMIIEEA')  
        
    def test_heapSort(self):
        a = [''] # not used a[0]
        a.extend([i for i in 'MAXPRIORITYQUEUE'])        
        heapSort(a)
        b = ''.join(a[1:])
        self.assertEqual(b, 'AEEIIMOPQRRTUUXY')
        
if __name__ == '__main__':
    unittest.main(exit=False)   
    