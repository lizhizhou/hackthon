#!/user/bin/env python

import threading
import subprocess        

class Command(object):
    TIMEOUT = -2
    SUCCESS = 0
    ERROR = -1    
    
    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None
        self.out = ''
        self.err = 0
        
    def run(self, timeout):
        def target():
            #print "subprocess started"
            self.process = subprocess.Popen(self.cmd, shell=True,stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
            self.out, self.err = self.process.communicate()
            #print "subprocess finished"
            
        thread = threading.Thread(target=target)
        thread.start()
        
        thread.join(timeout)
        if thread.is_alive():
            #print "Running Timeout, terminating process"
            self.process.terminate()
            thread.join()
            return self.TIMEOUT
        else:
            #print self.process.returncode
            if self.process.returncode:
                return self.ERROR
            else:
                return self.SUCCESS
            
    def output(self):
        return self.out
    
    def error(self):
        return self.err


def compile(src):
    pre,ext = src.split('.')
    if ext == 'py':
        return True, ''
    elif ext == 'java':
        cmd = Command('javac %s'%src)
    elif ext == 'cpp':
        cmd = Command('g++ %s -o %s'%(src,pre))
    else:
        return False, 'Unknown file'
    ret = cmd.run(20)
    if ret == Command.ERROR:
        return False, cmd.output()
    elif ret == Command.TIMEOUT:
        return False, 'Compile timeout'
    else:
        return True, ''
                
def test(src, case):
    pre,ext = src.split('.')


import unittest
import os

class HackTest(unittest.TestCase):
    
    @classmethod
    def setUpClass(self):  
        def ext_chk(x, y):
            z = x.split('.')   
            if z is None or len(z) < 2:
                return False
            else:
                return z[1] in y  
        print 'Setup'    
        self.source = [f for f in os.listdir('source') if ext_chk(f,['java','cpp','py'])]
        self.compiled = []
        print 'source:',self.source
        self.report = open('test_report.txt', 'w')
        
    def test_1(self): 
        print 'Test compile'
        self.report.write('='*50)
        self.report.write('\n')
        self.report.write('Test compile:\n')
        os.chdir('source')
        for src in self.source:            
            ret, err = compile(src)
            print '%s ... %s'%(src,ret)
            self.report.write('%s...%s\n'%(src,ret))
            self.report.write('%s\n'%err)
            if ret:
                self.compiled.append(src)   
        else:
            print self.compiled         
        
    def test_2(self):
        print 'Test ASCII'
        
        
        
        
        
        

            
if __name__ == '__main__':
    unittest.main(exit=False)
    
    

