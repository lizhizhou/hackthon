#!/user/bin/env python

class DirectEdge:
    
    def __init__(self, v, w, weight):
        self.__v = v
        self.__w = w
        self.__weight = weight
        
    def weight(self):
        return self.__weight
    
    def fromEdge(self):
        return self.__v
    
    def toEdge(self):
        return self.__w
    
       
    def __gt__(self, other):
        return self.__weight > other.weight()
    
    def __lt__(self, other):
        return self.__weight < other.weight()
    
    def __le__(self, other):
        return self.__weight <= other.weight()
    
    def __eq__(self, other):
        return self.__weight == other.weight()
    
    def __ne__(self, other):
        return self.__weight != other.weight()
    
    def __ge__(self, other):
        return self.__weight >= other.weight()
        
        
    def toString(self):
        return '%s->%s: %s'%(self.__v,self.__w,self.__weight)

    
class EdgeWeightDiGraph:
    
    def __init__(self, V):
        self.__V = V
        self.__E = 0
        self.__adj = [[] for i in range(V)]
        
    def V(self):
        return self.__V

    def E(self):
        return self.__E
    
    
    def addEdge(self, e):
        self.__adj[e.fromEdge()].append(e)
        self.__E += 1
        
    def adj(self, v):
        return self.__adj[v]
    
    def edges(self):
        b = []
        for i in range(self.__V):
            for e in self.__adj[i]:
                b.append(e)
        return b 
    
from heap_sort import IndexMinPQ

   
    
    
    

        